#!/bin/bash
#
# elb-functions
#
# EC2 Enterprise Load Balancers (A.K.A. Classic load Balancers)

elbs() {

  # List ELBs
  # Accepts LoadBalancer names on STDIN and converts to LoadBalancer names
  #
  #     $ elbs
  #     elb-MyLoadBalancer-1FNISWJN0W6N9  2019-12-13T10:24:55.220Z
  #     another-e-MyLoadBa-171CPCZF2E84T  2019-12-13T10:25:24.300Z

  local elb_names=$(skim-stdin)
  local filters=$(__bma_read_filters $@)

  {
    __bma_output_header LOAD_BALANCER_NAME CREATED_TIME
    aws elb describe-load-balancers           \
      ${elb_names/#/'--load-balancer-names '} \
      --output text                           \
      --query "
        LoadBalancerDescriptions[][
          LoadBalancerName,
          CreatedTime
        ]"                |
    grep -E -- "$filters" |
    LC_ALL=C sort -k 2
  } | columnise
}

elb-dnsname(){

  # List DNS Names of ELB(s)
  #
  #      USAGE: elb-dnsname load-balancer [load-balancer]
  #
  #      $ elbs | elb-dnsname
  #      elb-MyLoadBalancer-1FNISWJN0W6N9  elb-MyLoadBalancer-1FNISWJN0W6N9-563832045.ap-southeast-2.elb.amazonaws.com
  #      another-e-MyLoadBa-171CPCZF2E84T  another-e-MyLoadBa-171CPCZF2E84T-1832721930.ap-southeast-2.elb.amazonaws.com

  local elb_names=$(skim-stdin "$@")
  [[ -z $elb_names ]] && __bma_usage "load-balancer [load-balancer]" && return 1

  {
    __bma_output_header LOAD_BALANCER_NAME DNS_NAME
    aws elb describe-load-balancers           \
      ${elb_names/#/'--load-balancer-names '} \
      --output text                           \
      --query "
        LoadBalancerDescriptions[][
          LoadBalancerName,
          DNSName
        ]"
  } | columnise
}

elb-instances() {

  # List instances of ELB(s)
  #
  #      USAGE: elb-instances load-balancer [load-balancer]

  local elb_names=$(skim-stdin "$@")
  [[ -z "${elb_names}" ]] && __bma_usage "load-balancer [load-balancer]" && return 1

  {
    __bma_output_header INSTANCE_ID STATE REASON_CODE LOAD_BALANCER_NAME
    local elb_name
    for elb_name in $elb_names; do
      aws elb describe-instance-health   \
        --load-balancer-name "$elb_name" \
        --output text                    \
        --query "
          InstanceStates[][
            InstanceId,
            State,
            ReasonCode,
            '${elb_name}'
          ]"
    done
  } | columnise
}

elb-stack() {

  # List CloudFormation stack names of ELB(s)
  #
  #     USAGE: elb-stack load-balancer [load-balancer]
  #
  #     $ elbs | elb-stack
  #     elb          elb-MyLoadBalancer-1FNISWJN0W6N9
  #     another-elb  another-e-MyLoadBa-171CPCZF2E84T

  local elb_names=$(skim-stdin "$@")
  [[ -z "$elb_names" ]] && __bma_usage "load-balancer [load-balancer]" && return 1

  {
    __bma_output_header STACK_NAME LOAD_BALANCER_NAME
    aws elb describe-tags                                            \
      --load-balancer-names $elb_names                               \
      --output text                                                  \
      --query "
        TagDescriptions[].[
          [Tags[?Key=='aws:cloudformation:stack-name'].Value][0][0],
          LoadBalancerName
        ]"
  } | columnise
}

elb-subnets() {

  # List subnets of ELB(s)
  #
  #     USAGE: elb-subnets load-balancer [load-balancer]
  #
  #     $ elbs | elb-subnets
  #     rails-demo-ELB-FRBEQPCYSZQD  subnet-5e257318 subnet-7828cd0f subnet-c25fa0a7
  #     huginn-ELB-BMD0QUX179PK      subnet-5e257318 subnet-7828cd0f subnet-c25fa0a7
  #     prometheus-ELB-C0FGVLGQ64UH  subnet-5e257318 subnet-7828cd0f subnet-c25fa0a7

  local elb_names=$(skim-stdin "$@")
  [[ -z "$elb_names" ]] && __bma_usage "load-balancer [load-balancer]" && return 1

  {
    __bma_output_header LOAD_BALANCER_NAME SUBNETS
    aws elb describe-load-balancers    \
      --load-balancer-names $elb_names \
      --output text                    \
      --query "
        LoadBalancerDescriptions[][
          LoadBalancerName,
          join(' ', sort(Subnets))
        ]"
  } | columnise
}

elb-azs() {

  # List Availability Zones of ELB(s)
  #
  #     USAGE: elb-azs load-balancer [load-balancer]
  #
  #     $ elbs | elb-azs
  #     rails-demo-ELB-FRBEQPCYSZQD  ap-southeast-2a ap-southeast-2b ap-southeast-2c
  #     huginn-ELB-BMD0QUX179PK      ap-southeast-2a ap-southeast-2b ap-southeast-2c

  local elb_names=$(skim-stdin "$@")
  [[ -z $elb_names ]] && __bma_usage "load-balancer [load-balancer]" && return 1

  {
    __bma_output_header LOAD_BALANCER_NAME AVAILABILITY_ZONES
    aws elb describe-load-balancers          \
      --load-balancer-names $elb_names       \
      --output text                          \
      --query "
        LoadBalancerDescriptions[][
          LoadBalancerName,
          join(' ', sort(AvailabilityZones))
        ]"
  } | columnise
}

elb-tags() {

  # List tags applied ELB(s)
  #
  #     USAGE: elb-tags elb-id [elb-id]

  local elb_ids=$(skim-stdin "$@")
  [[ -z $elb_ids ]] && __bma_usage "elb-id [elb-id]" && return 1

  {
    __bma_output_header LOAD_BALANCER_NAME TAGS
    aws elb describe-tags                            \
      --load-balancer-names $elb_ids                 \
      --output text                                  \
      --query "
        TagDescriptions[].[
          LoadBalancerName,
          join(' ', [Tags[].[join('=',[Key,Value])][]][])
        ]
        "
  } | columnise
}

elb-tag() {

  # List named tag on ELB(s)
  #
  #     USAGE: elb-tag key elb-id [elb-id]

  local key="$1"
  shift
  local elb_ids=$(skim-stdin "$@")
  [[ -z $key ]] && __bma_usage "key elb-id [elb-id]" && return 1

  {
    __bma_output_header LOAD_BALANCER_NAME KEY VALUE
    aws elb describe-tags                          \
      --load-balancer-names $elb_ids               \
      --output text                                \
      --query "TagDescriptions[].[
         [ LoadBalancerName, Tags[?Key=='$key'][Key,Value][] ][]
       ][]"
  } | columnise
}
